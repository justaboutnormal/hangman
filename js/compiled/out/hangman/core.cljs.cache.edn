{:rename-macros {}, :renames {}, :externs {React {createElement {}}, document {getElementById {}, body {}}, String {fromCharCode {}}, Object {toUpperCase {}}}, :use-macros {defc rum.core}, :excludes #{}, :name hangman.core, :imports nil, :requires {rum rum.core, rum.core rum.core, event clojure.browser.event, clojure.browser.event clojure.browser.event}, :uses nil, :defs {present-word {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([word letters]))}, :name hangman.core/present-word, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 19, :method-params ([word letters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([word letters]))}, possible {:name hangman.core/possible, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 20, :column 1, :end-line 20, :end-column 18, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 20, :column 10, :end-line 20, :end-column 18}, :tag any}, show-possible {:name hangman.core/show-possible, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 21, :column 1, :end-line 21, :end-column 23, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 21, :column 10, :end-line 21, :end-column 23}, :tag any}, get-mistakes-count {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 36, :column 7, :end-line 36, :end-column 25, :arglists (quote ([word letters]))}, :name hangman.core/get-mistakes-count, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 25, :method-params ([word letters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([word letters]))}, toggle-show-possible! {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 30, :column 7, :end-line 30, :end-column 28, :arglists (quote ([]))}, :name hangman.core/toggle-show-possible!, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, guessed-letters {:name hangman.core/guessed-letters, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 12, :column 1, :end-line 12, :end-column 25, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 12, :column 10, :end-line 12, :end-column 25}, :tag any}, possible-words {:name hangman.core/possible-words, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 75, :column 1, :end-line 75, :end-column 21, :arglists (quote ([])), :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 75, :column 7, :end-line 75, :end-column 21, :arglists (quote ([]))}, :tag any}, game-over? {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([word letters]))}, :name hangman.core/game-over?, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 17, :method-params ([word letters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([word letters]))}, displayed-word {:name hangman.core/displayed-word, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 59, :column 1, :end-line 59, :end-column 21, :arglists (quote ([word letters])), :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 59, :column 7, :end-line 59, :end-column 21, :arglists (quote ([word letters]))}, :tag any}, controls {:name hangman.core/controls, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 72, :column 1, :end-line 72, :end-column 15, :arglists (quote ([])), :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([]))}, :tag any}, set-new-game! {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([]))}, :name hangman.core/set-new-game!, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, all-letters {:name hangman.core/all-letters, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 63, :column 1, :end-line 63, :end-column 18, :arglists (quote ([guessed-letters game-over])), :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 63, :column 7, :end-line 63, :end-column 18, :arglists (quote ([guessed-letters game-over]))}, :tag any}, rand-words {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([n words]))}, :name hangman.core/rand-words, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 17, :method-params ([n words]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n words]))}, word {:name hangman.core/word, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 11, :column 1, :end-line 11, :end-column 14, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 11, :column 10, :end-line 11, :end-column 14}, :tag any}, all-letters-coll {:name hangman.core/all-letters-coll, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 9, :column 1, :end-line 9, :end-column 26, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 9, :column 10, :end-line 9, :end-column 26}, :tag any}, app {:name hangman.core/app, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 81, :column 1, :end-line 81, :end-column 10, :arglists (quote ([])), :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 81, :column 7, :end-line 81, :end-column 10, :arglists (quote ([]))}, :tag any}, gallows {:name hangman.core/gallows, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 54, :column 1, :end-line 54, :end-column 14, :arglists (quote ([word letters])), :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 54, :column 7, :end-line 54, :end-column 14, :arglists (quote ([word letters]))}, :tag any}, all-words {:name hangman.core/all-words, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 8, :column 10, :end-line 8, :end-column 19}, :tag cljs.core/IVector}, guess-letter! {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 39, :column 7, :end-line 39, :end-column 20, :arglists (quote ([letter]))}, :name hangman.core/guess-letter!, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 20, :method-params ([letter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([letter]))}, win-game? {:protocol-inline nil, :meta {:file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :line 42, :column 7, :end-line 42, :end-column 16, :arglists (quote ([word letters]))}, :name hangman.core/win-game?, :variadic false, :file "/Users/mahon/Projects/hangman/src/hangman/core.cljs", :end-column 16, :method-params ([word letters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([word letters]))}}, :require-macros {rum rum.core, rum.core rum.core}, :cljs.analyzer/constants {:seen #{:key :keypress :on-click :div :class}, :order [:div :key :class :on-click :keypress]}, :doc nil}